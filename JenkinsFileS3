#!groovy
pipeline {
    agent { label "${CHOOSE_NODE}" }

    tools {
        maven 'NBS Maven'
        jdk 'JDK1.11'
    }

    parameters {
        choice(
                name: 'CHOOSE_NODE',
                choices: ['ansible-server2', 'ansible-server', 'ansible-server3', 'ansible-caas-test'],
                description: 'Executor to run the build on')
        string(
                name: 'GIT_SOURCE_BRANCH',
                defaultValue: 'main',
                description: 'Source Code Branch')
        choice(
                name: 'SERVICE_TO_BUILD',
                choices: ['consumer-zodiac', 'provider-date-validate'],
                description: 'This will be the path to your pom for building the project')
    }

    environment {
        M2_HOME = tool('NBS Maven')
        JAVA_HOME = tool('JDK1.11')
        PATH = "${JAVA_HOME}/bin:${PATH}"
        ARTIFACTORY_USERNAME = "openbanking-ci"
        ARTIFACTORY_PASSWORD = "Xd6uUZLwqhmqEfyW"
    }

    stages {

        stage('Preparation') {
            steps {
                script {
                    cleanWs()
                    checkout([$class: 'GitSCM', branches: [[name: "*/${GIT_SOURCE_BRANCH}"]], userRemoteConfigs: [[url: 'https://github.com/paramount97/cbt-spike.git']]])
                    //env.GIT_SOURCE_URL = 'https://github.com/nationwide-ccoe/nbs-cop-devtest.git'
                    echo "Checking out branch '${scm.branches[0].name}'"
                    env.mvnToolHome = tool('NBS Maven')
                    env.service_name = SERVICE_TO_BUILD

                }

            }
        }

        stage('Pact-publish to artifactory and S3') {
            when {
                expression { params.SERVICE_TO_BUILD == 'consumer-zodiac' }
            }
            steps {
                script {
                    sh "${mvnToolHome}/bin/mvn -f ${service_name}/pom.xml clean test pact:publish"
                    sh '''
                        echo
                        if [ "$1" != "" ]  #if parameter exists, use as base folder
                           then cd "$1"
                           fi
                        pwd
                        ls -R | grep ":$" |   \\
                           sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/   /' -e 's/-/|/\'
                        # 1st sed: remove colons
                        # 2nd sed: replace higher level folder names with dashes
                        # 3rd sed: indent graph three spaces
                        # 4th sed: replace first dash with a vertical bar
                        if [ `ls -F -1 | grep "/" | wc -l` = 0 ]   # check if no folders
                           then echo "   -> no sub-directories"
                           fi
                        echo
                        exit                   
                    '''
                    env.AWS_ACCESS_KEY_ID = ""
                    env.AWS_SECRET_ACCESS_KEY = ""
                    env.AWS_SESSION_TOKEN = ""
                    INIT_ROLE_DETAILS = assume_role()
                    def ROLE_DETAILS = INIT_ROLE_DETAILS.split(",")
                    env.AWS_ACCESS_KEY_ID = ROLE_DETAILS[0].trim()
                    env.AWS_SECRET_ACCESS_KEY= ROLE_DETAILS[1].trim()
                    env.AWS_SESSION_TOKEN = ROLE_DETAILS[2].trim()
                    withAWS(region:'eu-west-2') {
                        s3Upload(bucket: "nbs-cop-dev-eu-west-1-sit-testharness", path: "CBT-Spike/${BUILD_NUMBER}/", includePathPattern: "**/${service_name}*.json", workingDir: "${service_name}/target/pacts")
                    }
                    env.AWS_ACCESS_KEY_ID = ""
                    env.AWS_SECRET_ACCESS_KEY = ""
                    env.AWS_SESSION_TOKEN = ""
                }
            }
        }

        stage('Pact-verify') {
            when {
                expression { params.SERVICE_TO_BUILD == 'provider-date-validate' }
            }
            parallel {
                stage('Build and run a provider application') {
                    steps {
                        sh "${mvnToolHome}/bin/mvn -f ${service_name}/pom.xml spring-boot:run"
                    }
                }
                stage('Run pact test') {
                    steps {
                        sh "sleep 10"
                        sh "${mvnToolHome}/bin/mvn -f ${service_name}/pom.xml test -Dtest=ProviderPactTestWOBroker"
                        sh "sleep 5"
                        sh "curl -X POST localhost:8083/actuator/shutdown"

                    }
                }
            }
        }

    }

    post{
        always{
            script{
                cleanWs()
            }
        }
    }
}

def assume_role(){
    role_details = sh (
            returnStdout: true,
            script: '''
            set +x;
            OUT=$(aws sts assume-role --role-arn arn:aws:iam::329364001920:role/nbs-cop-dev-role-spoke-cicd --role-session-name Jenkinsjob);
            export AWS_ACCESS_KEY_ID=$(echo $OUT | jq -r '.Credentials''.AccessKeyId');
            export AWS_SECRET_ACCESS_KEY=$(echo $OUT | jq -r '.Credentials''.SecretAccessKey');
            export AWS_SESSION_TOKEN=$(echo $OUT | jq -r '.Credentials''.SessionToken');
            echo "$AWS_ACCESS_KEY_ID,$AWS_SECRET_ACCESS_KEY,$AWS_SESSION_TOKEN"
            set -x;
        '''
    )
    return role_details
}

